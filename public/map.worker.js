(()=>{"use strict";var e,t={924:(e,t,s)=>{s.d(t,{Pp:()=>i,hB:()=>c,sh:()=>u,_j:()=>o,Ch:()=>l,$S:()=>d,V5:()=>g});const{mapController:r,polygonsController:a,buildingsController:n}=s(452),o={init:r.init,refresh:n.refresh,list:n.getList,table:n.getBuildingsListForTable,search:n.search,details:n.getBuildingDataById,address:n.getBuildingDataByAddress,put:n.put,post:n.post,patch:n.patch,remove:n.remove,"group-update":n.groupUpdate,polygons:a.getPolygonsByType},i=["lit","footprint","build-commenced","coming-soon","other"],u=["lit","footprint","build","soon","other","current"],l={lit:"LIT",footprint:"Footprint",build:"BuildCommenced",soon:"ComingSoon",other:"Other"},d={LIT:"lit",Footprint:"footprint",BuildCommenced:"build",UnderConstruction:"build",ConstructionCommenced:"build",ComingSoon:"soon",Other:"other"},c={status:"Footprint",estimatedServiceDeliveryTime:"",coordinates:[0,0],address:"",addressComponents:{number:"",street:"",streetType:"",city:"",state:"",postCode:"",cadastralIdentifier:""},owner:{corporationName:"",contactPerson:"",corporationPhoneWork:"",corporationPhoneMobile:"",corporationEmailPrimary:"",corporationEmailAlternative:""},management:{managerName:"",managerPhoneWork:"",phoneWork:"",phoneMobile:"",emailPrimary:"",emailAlternative:""},buildingName:"",buildingType:"dwelling=,type=,category=,field=",customerInstallApprovalRequired:!0,inductionRequired:!0,difficultyLevel:{leadInInstallation:0,backboneInstallation:0,customerInstallation:0},infrastructure:{type:"",leadIn:{planned:!1,installed:!1},backbone:{planned:!1,installed:!1},customerAccessCabling:{planned:!1,installed:!1},gPOinMDF:{exist:!1,planned:!1,installed:!1},uPSinMDF:{planned:!1,installed:!1},gPOinRisers:{exist:!1,planned:!1,installed:!1},uPSinRisers:{planned:!1,installed:!1}},files:{design:"",laanInspect:"",laanInstall:"",scope:"",photos:[],approoval:""},numberOfLevels:0,numberOfDwellings:0,avgFloorHeight:0,levels:[{plannedRouter:!1,plannedSplicingBox:!1,plannedSplitter:!1,plannedOFTU:!1,plannedRack:!1,installedRouter:!1,installedSplicingBox:!1,installedSplitter:!1,installedOFTU:!1,installedRack:!1,routerId:""}]},g={lit:{event:"on-net",buildingStatus:"LIT",polygonStatus:"ServiceAvailable"},footprint:{event:"footprint",buildingStatus:"Footprint",polygonStatus:"ServiceAvailable"},build:{event:"construction-commenced",buildingStatus:"BuildCommenced",polygonStatus:"UnderConstruction"},soon:{event:"coming-soon",buildingStatus:"ComingSoon",polygonStatus:"ComingSoon"},other:{event:"not-available",buildingStatus:"Other",polygonStatus:null}}},452:(e,t,s)=>{s.r(t),s.d(t,{buildingsController:()=>K,mapController:()=>l,polygonsController:()=>G});const r=function(){let e="";return function(t){if(!t)return e;e=t}}(),a=function(){let e="";return function(t){if(!t)return e;e=t}}(),n=function(){let e="";return function(t){if(!t)return e;e=t}}(),o=function(){let e="";return function(t){if(!t)return e;e=t}}(),i=function(){let e="";return function(t){if(!t)return e;e=t}}(),u="init",l=new class{init(e){const{host:t,key:s,credentials:l,role:d,secret:c}=e.data;t||self.postMessage({status:422,action:u,error:!0,errorType:"Init",errorMessage:"API host required"}),s||self.postMessage({status:422,action:u,error:!0,errorType:"Init",errorMessage:"App key for access API required"}),l||self.postMessage({status:401,action:u,error:!0,errorType:"Buildings worker warning",errorMessage:"Access denied"}),t&&o(t),s&&n(s),l&&r(l),d&&a(d),c&&i(c),self.postMessage({status:200,action:u,host:o(),apiKey:n(),credentials:r(),role:a()})}setAPIHostURL(e){e.host&&o(e.host)}setAPIKey(e){e.key&&n(e.key)}setCredentials(e){e.credentials&&r(e.credentials)}setRole(e){e.role&&a(e.credentials)}},d=function(e){if(!e)return"";let{number:t,postCode:s,street:r,streetType:a}=e;return a="PDE"===a?"PD":"LINE"===a?"LN":a,`${s}.${function(e){e=e.split(" ").join("");for(const t of"aeiouyAEIOU".split(""))e=e[0]+e.slice(1).split(t).join("");return e.toUpperCase()}(r)}.${a}.${t}`};var c=s(924);const g=()=>new Promise((e=>Object.assign(indexedDB.open("buildings"),{onupgradeneeded:e=>{for(const t of c.sh)e.target.result.createObjectStore(t);return e.target.result},onsuccess:t=>e({status:200,result:t.target.result}),onerror:t=>e({status:700,result:null})}))),p=async(e,t,s)=>new Promise((r=>{g().then((a=>{const{status:n,result:o}=a;if(200!==n)return void r({status:n,result:"Open local DB error"});const i=o.transaction([e],"readwrite").objectStore(e);Object.assign(i.put(s,t),{onsuccess:()=>r({status:200,result:s}),onerror:()=>r({status:400,result:null,error:!0,errorType:"Local DB error",errorMessage:`Failed to save data to local DB: ${t}`})})}))})),y=(e,t)=>new Promise((s=>{g().then((r=>{const{status:a,result:n}=r;if(200!==a)return void s({status:a,result:null});const o=n.transaction([e]).objectStore(e);Object.assign(o.get(t),{onsuccess:r=>s({status:r.target.result?200:404,result:r.target.result?r.target.result:`The data ${t} not found in db store ${e}`}),onerror:e=>s({status:704,result:e.target.error})})}))})),f=(e,t)=>new Promise((s=>{g().then((r=>{const{status:a,result:n}=r;if(200!==a)return void s({status:a,result:null});const o=n.transaction([e],"readwrite").objectStore(e);Object.assign(o.delete(t),{onsuccess:r=>s({action:"delete",store:e,key:t,status:200,result:null}),onerror:e=>s({status:400,result:e.target.error})})}))})),m=async function(e){const t=[],s=c.$S[e[0].status];for(const r of e){const{address:e}=r;t.push(p(s,e,r))}return await Promise.all(t)},b={status:403,result:null,error:!0,errorType:"Forbidden action",errorMessage:"You have no rights to perform this action"},h={error:!0,errorType:"Remote server error",errorMessage:"Operation failed"},v={status:400,error:!0,errorType:"Buildings",errorMessage:"Operation failed: local DB error"},w={status:500,action:"post",error:!0,errorType:"Create new building",errorMessage:"Operation failed: remote server error"},T=(e,t)=>({status:400,action:e,key:t,error:!0,errorType:`Update ${t} details`,errorMessage:"Operation failed: local DB error"}),O=async function(e){if(!navigator.onLine)return{status:0,result:"Offline mode: Data has not been saved. Try later"};if(!o()||!n())return{status:409,action:"get",error:!0,errorType:"Worker configuration",errorMessage:"Missing map-worker settings"};const t={error:!0,errorType:e,errorMessage:"Not found"},s=await fetch(`${o()}/${e}`,{method:"GET",headers:{Authorization:n(),Credentials:r(),"Content-Type":"application/json"}}),a=await s.json(),i={status:s.status,result:a.data,page:a.page,pages:a.pages};return Object.assign(i,200===s.status?{}:404===s.status?t:h)},C={message:!0,messageType:"Create new",messageText:"Data successfully created"},S={message:!0,messageType:"Update",messageText:"Data successfully updated"},j=async function(e,t,s){if(!o()||!n())return{status:409,action:"patch",error:!0,errorType:"Worker configuration",errorMessage:"Missing map-worker settings"};if(!r())return b;const a=await fetch(`${o()}/${e}/${t}`,{method:"PATCH",headers:{Authorization:n(),Credentials:r(),"Content-Type":"application/json"},body:JSON.stringify(s)}),i={status:a.status,action:"patch",result:(await a.json()).data};return Object.assign(i,200===a.status?S:h)},k={message:!0,messageType:"Update",messageText:"Data successfully updated"},M={message:!0,messageType:"Delete data",messageText:"Data successfully deleted"},[$,D]=["refresh","Refresh buildings data"],B={action:$,error:!0,errorType:D},P=Object.assign(B,{status:500,errorMessage:"Operation failed: remote server error"}),I=Object.assign(B,{status:400,errorMessage:"Operation failed: local DB error"}),A="table",N="details",x=async e=>{const t=e,s=await O(`building/${e}`);return 200!==s.status?Object.assign(s,{action:N}):(s.result.uniqueCode=s.result.uniqueCode||d(s.result.addressComponents),await p("current","data",s.result),{status:s.status,action:N,store:s.result.status,key:t,result:s.result})},L="address",F="search",U=async e=>{for(const t in c.Ch){const{status:s,result:r}=await y(t,e);if(200===s)return{status:s,action:F,key:t,address:e,result:r}}return{status:404,action:F,key:"Not found",address:e,result:null}},E="post",_="patch",q="remove",R={action:q,result:null,error:!0,errorType:"Delete bulding"},W=Object.assign(R,{status:404,errorMessage:"Operation failed: building was not found"}),V=["lit","footprint","build","soon","other"],z=async e=>{for(const t of V){const{status:s,result:r}=await y(t,e);if(200===s)return{status:(await f(t,e)).status,action:"remove",key:e}}},J="group-update",H={action:J,status:200,message:!0,messageType:"Group update",messageText:"Buildings of group details updated"},K=new class{async refresh(){self.postMessage(await(async()=>{if(!navigator.onLine)return offlineError($,"received");await Promise.all(Object.keys(c.Ch).map((e=>(e=>new Promise((t=>{g().then((s=>{const{status:r,result:a}=s;if(200!==r)return void t({status:r,result:null});const n=a.transaction([e],"readwrite").objectStore(e);Object.assign(n.clear(),{onsuccess:e=>t({status:200,result:null}),onerror:s=>t({status:704,result:`Cleaning ${e}: operation failed`})})}))})))(e))));for(const a of c.Pp){var e=0;do{var t=await O(`building/${a}?per_page=50&page=${e+1||1}`);if(200!==t.status)return P;var{page:e,pages:s,result:r}=await t;if(!r||!r.length)continue;const n=await m(r);if(!n||!Array.isArray(n)||n.filter((e=>200!==e.status)).length)return I}while(e<s)}return{status:200,action:$}})())}async getList(e){self.postMessage(await(async e=>{const[t,s]=["list",e];if(-1===Object.keys(c.Ch).indexOf(e))return{status:422,action:t,store:s,result:`Invalid request: type ${e} not found`};const{status:r,result:a}=await(n=e,new Promise((e=>{g().then((t=>{const{status:s,result:r}=t;if(200!==s)return void e({status:s,result:null});const a=r.transaction([n]).objectStore(n);return Object.assign(a.getAllKeys(),{onsuccess:t=>e({status:t.target.result?200:404,result:t.target.result?t.target.result:`No one key found in db store ${n}`}),onerror:t=>e({status:704,result:t.target.error})})}))})));var n;return{status:r,key:s,action:t,result:Object.assign(a,{event:c.V5[s].event,buildingStatus:c.V5[s].buildingStatus,polygonStatus:c.V5[s].polygonStatus})}})(e.key))}async getBuildingsListForTable(e){self.postMessage(await(async e=>{if(-1===Object.keys(c.Ch).indexOf(e))return{status:422,action:A,key:e,result:`Invalid request: type ${e} not found`};const{status:t,result:s}=await(r=e,new Promise((e=>{g().then((t=>{const{status:s,result:a}=t;if(200!==s)return void e({status:s,result:null});const n=a.transaction([r]).objectStore(r);return Object.assign(n.getAll(),{onsuccess:t=>e({status:t.target.result?200:404,result:t.target.result?t.target.result:`No one key found in db store ${r}`}),onerror:t=>e({status:704,result:t.target.error})})}))})));var r;const a=s.map((e=>({id:e._id,address:e.address,uniqueCode:e.uniqueCode||d(e.addressComponents),buildingName:e.buildingName||"",estimatedServiceDeliveryTime:e.estimatedServiceDeliveryTime})));return{status:t,action:A,key:e,result:Object.assign(a,{event:c.V5[e].event,buildingStatus:c.V5[e].buildingStatus,polygonStatus:c.V5[e].polygonStatus})}})(e.key))}async search(e){self.postMessage(await U(e.key))}async getBuildingDataById(e){self.postMessage(await x(e.key))}async getBuildingDataByAddress(e){self.postMessage(await(async e=>{const t=await U(e);if(200!==t.status)return((e=404,t="Building")=>({status:e,store:"Not found",action:L,key:t,result:null,error:!0,errorType:"Search building by address",errorMessage:`${t} was not found`}))(t.status,e);const{status:s,store:r,result:a}=await x(t.result._id);return{status:s,action:L,store:t.store,key:e,result:a}})(e.key))}async put(e){self.postMessage(await async function(e,t){const s=e;let a=await x(e);if(200!==a.status)return getError(a.status,e);if(Object.assign(a.result,{...t}),a=await async function(e,t,s){if(!o()||!n())return{status:409,action:"put",error:!0,errorType:"Worker configuration",errorMessage:"Missing map-worker settings"};if(!r())return b;const a=await fetch(`${o()}/building/${t}`,{method:"PUT",headers:{Authorization:n(),Credentials:r(),"Content-Type":"application/json"},body:JSON.stringify(void 0)}),i={status:a.status,action:"put",result:(await a.json()).data};return Object.assign(i,200===a.status?k:h)}(0,e),200!==a.status)return putError(a.status,t.address);const{address:i,addressComponents:u,coordinates:l,distanceFromFootprint:d,estimatedServiceDeliveryTime:g,status:y}=await a.json(),f=c.$S[y],m=await p(f,i,{address:i,addressComponents:u,coordinates:l,estimatedServiceDeliveryTime:g,status:y,_id:e});return 200!==m.status?putError(m.status,t.address):{action:"put",key:s,status:a.status,result:m}}(e.key,e.data))}async patch(e){self.postMessage(await async function(e,t){const s=e;let r=Boolean(t.status);if(t.status&&!Object.keys(c.Ch).map((e=>c.Ch[e])).includes(t.status))return a=t.status,{action:_,status:422,error:!0,errorType:"Update building details",errorMessage:`Invalid building status ${a}`};var a;const n=await j("building",e,t);if(200!==n.status)return n;const{address:o,addressComponents:i,coordinates:u,buildingName:l,estimatedServiceDeliveryTime:g,status:y}=n.result,f=d(i);if(r&&await z(o),200!==n.status)return((e=400,t="building")=>({status:e,action:"put",key:t,error:!0,errorType:`Update ${t} details`,errorMessage:"Operation failed"}))("patch",n.status);const m=Object.keys(c.Ch).find((e=>c.Ch[e]===y)),b=await p(m,o,{address:o,addressComponents:i,coordinates:u,buildingName:l,estimatedServiceDeliveryTime:g,status:y,uniqueCode:f,_id:e});return 200!==b.status?T("patch",o):Object.assign(b,{status:200,action:_,key:s},(e=>({action:_,status:200,message:!0,messageType:e,messageText:"Building details updated"}))(o))}(e.key,e.data))}async post(e){self.postMessage(await(async e=>{if(!navigator.onLine)return((e,t="saved")=>({status:0,action:e,error:!0,errorType:"Offline",message:`Offline mode: Data has not been ${t}. Try later`,result:`Offline mode: Data has not been ${t}. Try later`}))(E,"saved");if(!e.status)return postError(422,"Building status not defined");const t=c.$S[e.status];if(!t)return postError(422,`Invalid building status ${e.status}`);Object.keys(e).includes("buildingId")&&delete e.buildingId;const s=await U(e.address);if(s.result)return{status:409,action:E,store:t,key:e.address,result:s.result._id,message:!0,messageType:"Creating new building",messageText:`Building ${e.address} already exists`};const a=Object.assign(JSON.parse(JSON.stringify(c.hB)),e),i=await async function(e,t){if(!o()||!n())return{status:409,action:"post",error:!0,errorType:"Worker configuration",errorMessage:"Missing map-worker settings"};if(!r())return b;const s=await fetch(`${o()}/building`,{method:"POST",headers:{Authorization:n(),Credentials:r(),"Content-Type":"application/json"},body:JSON.stringify(t)}),a={status:s.status,action:"post",result:(await s.json()).data};return Object.assign(a,200===s.status?C:h)}(0,a);if(403===i.status)return i;if(200!==i.status)return w;const u=i.result,{address:l,addressComponents:d,coordinates:g,status:y,estimatedServiceDeliveryTime:f="",buildingName:m="",distanceFromFootprint:T=0}=e,O={address:l,addressComponents:d,coordinates:g,status:y,estimatedServiceDeliveryTime:f,_id:u},{status:S,result:j}=await p(t,e.address,O);return 200!==S?v:{status:200,action:E,store:t,key:e.address,result:u}})(e.data))}async remove(e){self.postMessage(await(async e=>{if(!navigator.onLine)return{status:0,result:"Offline mode: Data has not been saved. Try later"};let t=await O(`building/${e}`);if(200!==t.status)return W;const{address:s,status:a}=t.result,i=c.$S[a];return 200!==(await async function(e){if(!o()||!n())return{status:409,action:"remove",error:!0,errorType:"Worker configuration",errorMessage:"Missing map-worker settings"};if(!r())return b;const t=await fetch(`${o()}/${e}`,{method:"DELETE",headers:{Authorization:n(),Credentials:r(),"Content-Type":"application/json"}}),s=await t.json(),a={status:t.status,action:"remove",result:s};return Object.assign(a,200===t.status?M:h)}(`building/${e}`)).status?(e=>Object.assign(R,{status:500,errorType:e,errorMessage:"Operation failed: remote server error"}))(s):200!==(await f(i,s)).status?(e=>Object.assign(R,{status:400,errorType:e,errorMessage:"Operation failed: local DB error"}))(s):{status:200,action:q,store:i,key:s,result:!0}})(e.key))}async groupUpdate(e){self.postMessage(await async function(e,t){let s=Boolean(t.status);if(t.status&&!Object.keys(c.Ch).map((e=>c.Ch[e])).includes(t.status))return r=t.status,{action:J,status:422,error:!0,errorType:"Update building details",errorMessage:`Invalid building status ${r}`};var r;for(const r of e){const{result:e}=await j("building",r,t);let{address:a,addressComponents:n,coordinates:o,buildingName:i,uniqueCode:u,estimatedServiceDeliveryTime:l,status:g,_id:y}=e;const f=Object.keys(c.Ch).find((e=>c.Ch[e]===g));s&&await z(a),200!==(await p(f,a,{address:a,addressComponents:n,coordinates:o,buildingName:i,estimatedServiceDeliveryTime:l,status:g,uniqueCode:u||d(n),_id:y})).status&&self.postMessage(T(J,a))}return Object.assign({},{status:200,action:J},H)}(e.group,e.details))}},G=new class{async getPolygonsByType(e){self.postMessage(await async function(e){const t=await O(`polygons/${e.key}`);return 200!==t.status?Object.assign(t,{action:"polygons"}):{status:t.status,action:"polygons",key:e.key,type:t.result[0].properties.typeOf,result:t.result.map((e=>({coordinates:e.geometry.coordinates[0]})))}}(e))}}}},s={};function r(e){var a=s[e];if(void 0!==a)return a.exports;var n=s[e]={exports:{}};return t[e](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e=r(924),self.onmessage=function(t){const{action:s}=t.data;if(!e._j[s]||"function"!=typeof e._j[s])return self.postMessage({status:422,action:s,result:"Invalid request"});e._j[s](t.data)}})();