{"version":3,"sources":["webpack:///./src/components/inputs/GeoscapeAutocomplete.vue?5943","webpack:///src/components/inputs/GeoscapeAutocomplete.vue","webpack:///./src/components/inputs/GeoscapeAutocomplete.vue?f752","webpack:///./src/components/inputs/GeoscapeAutocomplete.vue?b2fb","webpack:///./src/components/inputs/GeoscapeAutocomplete.vue?b62f","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","staticStyle","style","background","color","loading","addresses","search","value","on","$event","notSubmited","model","callback","$$v","address","expression","submit","_v","staticRenderFns","name","props","data","computed","variants","map","watch","immediate","handler","val","select","getVariants","methods","$emit","component","VAutocomplete","VBtn","VRow","VToolbar","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","type","default","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","lazySearch","classes","selectedIndex","computedItems","selectedValues","selectedItems","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","internalValue","isFocused","document","$refs","input","isMenuActive","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","autocomplete","domProps","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","e","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event"],"mappings":"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","file":"js/chunk-588c9ff8.9bec6cbf.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-row',{attrs:{\"justify\":\"center\"}},[_c('v-toolbar',{staticClass:\"transparent\",staticStyle:{\"box-shadow\":\"none\"}},[_c('v-autocomplete',{style:({ background: _vm.color }),attrs:{\"loading\":_vm.loading,\"items\":_vm.addresses,\"search-input\":_vm.search,\"cache-items\":\"\",\"flat\":\"\",\"hide-no-data\":\"\",\"hide-details\":\"\",\"placeholder\":_vm.value,\"outlined\":\"\",\"dense\":\"\"},on:{\"update:searchInput\":function($event){_vm.search=$event},\"update:search-input\":function($event){_vm.search=$event},\"change\":_vm.notSubmited},model:{value:(_vm.address),callback:function ($$v) {_vm.address=$$v},expression:\"address\"}}),_c('v-btn',{attrs:{\"text\":\"\",\"color\":\"primary\"},on:{\"click\":_vm.submit}},[_vm._v(\"SUBMIT\")])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-row justify=\"center\">\n    <v-toolbar class=\"transparent\" style=\"box-shadow: none\">\n      <v-autocomplete\n        v-model=\"address\"\n        :loading=\"loading\"\n        :items=\"addresses\"\n        :search-input.sync=\"search\"\n        cache-items\n        flat\n        hide-no-data\n        hide-details\n        :placeholder=\"value\"\n        outlined\n        dense\n        @change=\"notSubmited\"\n        :style=\"{ background: color }\"\n      />\n\n      <v-btn text @click=\"submit\" color=\"primary\">SUBMIT</v-btn>\n    </v-toolbar>\n  </v-row>\n</template>\n\n<script>\nexport default {\n  name: 'GeoscapeAutocomplete',\n\n  props: ['value'],\n\n  data: () => ({\n    address: '',\n    variants: [],\n    loading: false,\n    search: null,\n    google: '',\n    formula: '',\n    color: 'transparent'\n  }),\n  computed: {\n    addresses () {\n      return this.variants.map(item => item.address)\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler (val) {\n        this.address = val\n      }\n    },\n    search (val) {\n      val && val !== this.select && this.getVariants(val)\n    }\n  },\n  methods: {\n    notSubmited () {\n      this.color = '#9004'\n    },\n    submit () {\n      this.color = 'transparent'\n      this.$emit('update:value', this.address)\n    },\n    async getVariants (val) {\n      if (val.length < 4) return\n      this.loading = true\n      this.variants = (await (await fetch(`https://api.psma.com.au/v1/predictive/address?maxNumberOfResults=20&query=${encodeURIComponent(val)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: process.env.VUE_APP_GEOSCAPE_KEY\n        }\n      })).json()).suggest\n      this.loading = false\n    }\n  }\n}\n</script>\n\n<style>\n::placeholder {\n  color: #555!important;\n  opacity: 1; /* Firefox */\n}\n\n:-ms-input-placeholder { /* Internet Explorer 10-11 */\n color: #555!important;\n}\n\n::-ms-input-placeholder { /* Microsoft Edge */\n color: #555!important;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GeoscapeAutocomplete.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GeoscapeAutocomplete.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GeoscapeAutocomplete.vue?vue&type=template&id=7d0843b0&\"\nimport script from \"./GeoscapeAutocomplete.vue?vue&type=script&lang=js&\"\nexport * from \"./GeoscapeAutocomplete.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GeoscapeAutocomplete.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAutocomplete } from 'vuetify/lib/components/VAutocomplete';\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VToolbar } from 'vuetify/lib/components/VToolbar';\ninstallComponents(component, {VAutocomplete,VBtn,VRow,VToolbar})\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GeoscapeAutocomplete.vue?vue&type=style&index=0&lang=css&\"","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}